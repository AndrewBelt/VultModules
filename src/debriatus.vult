

fun saturate(x) @[table(min = -24.0, max = 24.0, size = 241)]{
  return tanh(x);
}

fun factor(cv) @[table(min = 0.0, max = 1.0, size = 128)] {
   val x = 0.6 + 0.3 * cv;
   return 10000.0 * exp(-x * 10.0);
}

fun crush(i:real, cv:real) {
	val out = i;
	if(cv == 0.0){
		out = i;
	}
	else {
		val b = factor(cv);
		val x = int(i * b);
		out = real(x)/b;
	}
	return out;
}

fun fold(signal:real, level:real) : real {
   val sign = if signal > 0.0 then 1.0 else -1.0;
   val amp = abs(signal) * (8.0 * level + 1.0);
   val base = floor(amp);
   val delta = amp - base;
   val out = if int(base) % 2 <> 0 then 1.0 - delta else delta;
   return sign * out;
}

fun process(input, fold, crush, distort, saturate) {
   val x = fold(input, fold);
   val y = crush(x, crush);
   val z = y * (1.0 - 2.0 * distort) + y * y * y * distort * 8.0 - distort;
   val out = saturate(z * (1.0 + saturate * 8.0));
   return out;
}