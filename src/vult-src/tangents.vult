/*
The MIT License (MIT)

Copyright (c) 2017 Leonardo Laguna Ruiz
-----
Steiner-Parker filter
*/

fun tune(cut, fs, oversampling) {
   val f = Util.cvTokHz(cut);
   val fh = (2.0 * pi()) * f / (oversampling * fs);
   return fh;
}

fun tune_44100(cut) @[table(min = 0.0, max = 1.0, size = 128)]{
   return tune(cut, 44.1, 4.0);
}

fun tune_48000(cut) @[table(min = 0.0, max = 1.0, size = 128)]{
   return tune(cut, 48.0, 4.0);
}

fun tune_88200(cut) @[table(min = 0.0, max = 1.0, size = 128)]{
   return tune(cut, 88.2, 2.0);
}

fun tune_96000(cut) @[table(min = 0.0, max = 1.0, size = 128)]{
   return tune(cut, 96.0, 2.0);
}

fun tune_176400(cut) @[table(min = 0.0, max = 1.0, size = 128)]{
   return tune(cut, 176.4, 1.0);
}

fun tune_192000(cut) @[table(min = 0.0, max = 1.0, size = 128)]{
   return tune(cut, 192.0, 1.0);
}

fun getTune(cut, fs) {
   if (fs == 44100.0)
      return tune_44100(cut);
   else if (fs == 48000.0)
      return tune_48000(cut);
   else if (fs == 88200.0)
      return tune_88200(cut);
   else if (fs == 96000.0)
      return tune_96000(cut);
   else if (fs == 176400.0)
      return tune_176400(cut);
   else if (fs == 192000.0)
      return tune_192000(cut);
   else
      return tune(cut, fs, 4.0);
}

fun heun(lp, bp, hp, wh, cut, res) {
   mem p0, p1;
   val resfactor = 3.0;

   val yt = Util.cubic_clipper(hp + p0);
   val feedt = resfactor * res * yt;
   val dpt0 = (bp - hp + feedt - p0 + p1) * wh;
   val dpt1 = (-2.0 * bp + hp + lp - 2.0 * feedt + p0 - 2.0 * p1) * wh;

   val pt0 = p0 + dpt0;
   val pt1 = p1 + dpt1;

   val yn = Util.cubic_clipper(hp + pt0);
   val feed = resfactor * res * yn;
   val dp0 = (bp - hp + feed - pt0 + pt1) * wh;
   val dp1 = (-2.0 * bp + hp + lp - 2.0 * feed + pt0 - 2.0 * pt1) * wh;

   p0 = p0 + (dp0 + dpt0)/ 2.0;
   p1 = p1 + (dp1 + dpt1)/ 2.0;

   return Util.cubic_clipper(hp + p0);
}

fun process_heun(lp, bp, hp, cut, res) {
   mem fh;
   val fs = Util.getSampleRate();
   if(Util.change(cut) || Util.change(fs)) {
      fh = getTune(cut, fs);
   }
   val out = 0.0;

   if(fs == 176400.0 || fs == 192000.0) {
      out = h:heun(lp, bp, hp, fh, cut, res);
   }
   else if(fs == 88200.0 || fs == 96000.0) {
      out = h:heun(lp, bp, hp, fh, cut, res);
      out = h:heun(lp, bp, hp, fh, cut, res);
   }
   else {
      out = h:heun(lp, bp, hp, fh, cut, res);
      out = h:heun(lp, bp, hp, fh, cut, res);
      out = h:heun(lp, bp, hp, fh, cut, res);
      out = h:heun(lp, bp, hp, fh, cut, res);
   }
   return out;
}

fun simple_noise() {
   mem x1 = (x1 * 17389 + 7919) % 32768;
   val y1 = real(x1) / 32768.0;
   return y1;
}

fun process(lp, bp, hp, cut_in, res_in) {
   val res = Util.polylog(res_in);
   val comp = Util.map(res, 0.9, 1.0, 0.0, 0.25);
   val limit = if comp > 0.0 then 0.9 - comp else 0.9;
   val cut = clip(cut_in, 0.0, limit);
   val noise = Util.simple_noise() * 0.005;
   return process_heun(lp + noise,bp, hp, cut, res);
}
