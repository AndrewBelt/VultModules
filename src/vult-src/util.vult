/*
The MIT License (MIT)

Copyright (c) 2017 Leonardo Laguna Ruiz
-----
Collection of small useful functions
*/

external getSampleRate() : real "getSampleRate";

fun sampleRateScale() {
   return 44100.0 / Util.getSampleRate();
}

fun edge(x:bool) : bool {
   mem pre;
   val ret = x && not(pre);
   pre = x;
   return ret;
}

fun change(x:real):bool {
    mem pre_x;
    val v:bool = pre_x <> x;
    pre_x = x;
    return v;
}

fun cubic_clipper(x) {
   if(x <= -2.0/3.0)
      return -2.0/3.0;
   else if(x >= 2.0/3.0)
      return 2.0/3.0;
   else
      return 27.0/23.0 * (x - (x * x * x) / 3.0);
}

fun stanh(x) @[table(min = -24.0, max = 24.0, size = 241)] {
  return 16.0 * tanh(x / 16.0);
}

fun sine(x) @[table(min = 0.0, max = 1.0, size = 101)] {
  return sin(x * 2.0 * pi());
}

fun saturate(x) @[table(min = -24.0, max = 24.0, size = 241)] {
  return tanh(x);
}

fun map(x:real,x0,x1,y0,y1) : real {
  return (x-x0)*(y1-y0)/(x1-x0) + y0;
}

fun dcblock(x0){
  mem x1,y1;
  val y0 = x0-x1+y1*0.995;
  x1,y1 = x0,y0;
  return y0;
}

fun smooth(input){
   mem x;
   x = x+(input-x)*0.005;
   return x;
}

fun cvToPitch(cv) {
   return cv * 120.0 + 24.0;
}

fun cvToperiodUnit(cv) @[table(size=32,min=0.0,max=1.0)] {
   val pitch = cvToPitch(cv);
   val f = 8.175798915643707 * exp(0.057762265046662105 * pitch); //440. 2^((pitch - 69)/12.)
   return 1.0 / f / 2.0;
}

/* Returns the frequency in kHz of the corresponding CV */
fun cvTokHz(cv) @[table(size=32,min=0.0,max=1.0)] {
   val pitch = Util.cvToPitch(cv);
   val f = 8.175798915643707 * exp(0.057762265046662105 * pitch); //440. 2^((pitch - 69)/12.)
   return f/1000.0;
}

fun pitchToRateUnit(pitch) @[table(size=32, min=0.0, max=127.0)] {
   return 8.175798915643707 * exp(0.057762265046662105 * pitch);
}

fun cvToRateUnit(cv) @[table(size=128, min=0.0, max=0.9)] {
   return pitchToRateUnit(cvToPitch(cv));
}

fun pitchToRate(pitch) {
   mem rate;
   val fs = getSampleRate();
   if(change(pitch) || change(fs))
      rate = pitchToRateUnit(pitch) / getSampleRate();
   return rate;
}

fun cvToRate(cv) {
   mem rate;
   val fs = getSampleRate();
   if(change(cv) || change(fs))
       rate = cvToRateUnit(cv) / fs;
   return rate;
}

fun simple_noise() {
   mem x1 = (x1 * 17389 + 7919) % 32768;
   val y1 = real(x1) / 32768.0;
   return y1;
}

fun polylog(x){
   val xx = clip(x, 0.0, 1.0);
   return (2.0 - xx) * xx;
}
