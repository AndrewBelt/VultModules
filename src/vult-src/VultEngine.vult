

fun rescomb(in, cv_in, tone_in, res_in) {
   val i = clip(in, -10.0, 10.0);
   val cv = clip(cv_in, 0.0 , 1.0);
   val tone = clip(tone_in, -1.05 , 1.05);
   val res = clip(res_in, -1.1 , 1.1);
   return inst:Rescomb.do(i, cv, tone, res);
}

fun stabile(in, cut_in, res_in) {
   val cut = clip(cut_in, 0.0 , 0.92);
   val res = clip(res_in, 0.0 , 4.0);
   return Stabile.process(in, cut, res);
}

fun lateralus(in, cut, res) {
   return Lateralus.process(in, cut, res);
}

fun tangents(lp, bp, hp, cut, res) {
   return Tangents.process(lp, bp, hp, cut, res);
}

fun debriatus(in, fold_in, crush_in, distort_in, saturate_in) {
   val fold = clip(fold_in, 0.0 , 1.0);
   val crush = clip(crush_in, 0.0 , 1.0);
   val distort = clip(distort_in, 0.0 , 1.0);
   val saturate = clip(saturate_in, 0.0 , 1.0);
   return Debriatus.process(in, fold, crush, distort, saturate);
}

fun trummor(gate, osc_in, noise_in) {
   return processor:Trummor.do(gate, osc_in, noise_in);
}
and trummor_param(param, value) {
   _ = processor:Trummor.setParameter(param, value);
}

fun tohe(x, tone_in) {
   val tone = clip(tone_in, -1.0, 1.0);
   return Tohe.do(x, tone);
}
